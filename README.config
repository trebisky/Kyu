Kyu config system and file organization.

    1-14-2017

At this point Kyu supports two boards in actual fact:

bbb - the Beaglebone Black
orange_pi - the Orange Pi PC and PC plus

The "config" script should be used to set things up to build Kyu for a given board
and/or to switch between boards>

Type:

./config bbb
make

In the new scheme of things we have "board" and "arch" to keep things
straight.  "board" is a link to "bbb" or "orange_pi" and "arch"
is a link to "arm" or "x86".  This seems like a good scheme and has
already led to a fair bit of code cleanup and simplification.

Someday we may introduce an include directory, and perhaps even
a drivers directory to hold drivers that are shared between
different boards.

-----------------

In theory, Kyu also supports the x86 (Skidoo, which preceded Kyu only
ran on a legacy x86).  However Kyu has not run on an x86 for years and
it is absolutely certain that the current codebase will not do so and will
need serious work before it does.

It is entirely possible that the Intel Galileo will be the first (or next)
x86 board to actually run Kyu, but making this happen is not a priority.
The Galileo is interesting primarily because it has IO facilities,
but the current crop of ARM based boards are both more powerful and
less expensive, so the motivation even to work with the Galileo is weak.
This ignores the additional fact that ARM is a much nicer architecture.

Modern desktop x86 systems provide little motivation for running Kyu.
A system like Kyu is all about hardware access and modern x86 desktop
machines have done away with parallel ports and the ISA bus and virtually
every hardware interface with general purpose options.

-----------------

The following are some old notes from when I was first thinking this through.

This is a proposed schema for supporting a multitude of boards (and perhaps architectures)
under the same source tree.  This would involve a reorganization of files, with the major
benefit being that when board independent enhancements were made, it would be easy to
simply rebuild all targets to pull in the changes.  The alternative is a separate source
tree (and kyu project) for every target and merging changes by hand.

boards and targets -- 

I use these terms interchangeably, but the file schema uses board exclusively

board and arch ... and config -- 

The case motivating this is a second ARM target.  We have the BBB, but are adding
the Orange Pi.  What we would like to do someday is to type "config bbb; make"
and get the build for a given board target.   This would require a config script
and a config directory holding Makefiles and perhaps scripts like "config_bbb"
for each target.  The Makefiles could be handled via symbolic links, as could
many other things.

I plan to avoid adding drivers and include directories, at least for the
first run.  Where do we put directories with board files?  For starters
I plan to just leave them hanging off the main directory as bbb and orange_pi.

What about x86?  I am simply going to procrastinate for now and leave all of
this in the x86 directory.   Ultimately we need board directories like
"pc_x86" and "galileo".  Maybe pc_legacy for the old skidoo target with lots
of ISA stuff (maybe pc_isa).  But for now we ignore all this and issue the
disclaimer that all x86 target builds are broken at this time.

arch and board.

arch is a link to either arm or x86
board is a link to either bbb or orange_pi

There should be no direct references to anything other than arch or board.

The make process will produce machine.o from "arch"
and board.o from "board".

We could someday move all of the arch independent stuff from the root
directory to "common" or "core" (I like common myself).

